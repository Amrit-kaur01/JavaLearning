

 * serialization is a mechanism of converting the state of an object into byte stream 
 * the byte stream created is platform-independent. So the object serialized on one platform
   can be deserialized on another platform
 * to make a java object serializable, we need to implement the java.io.Serializable interface
 * Serializable is a marker interface and is used to mark java classes so that objects of
   these classes may get certain capability
 * ObjectOutputStream class contains writeObject() method for serializing the object
 * ObjectInputStream class contains readObject() method for deserializing an object

 * Advantages of serialization:
   1. to save/persist the state of an object
   2. to travel an object across a network
   
 * If a parent class has implemented Serializable interface then child class doesn't need
   to implement it but vice-versa is not true.
   
 * If superclass is not serializable then when a subclass is deserialized then super class's default constructor will be invoked. Hence all variable will get default value and reference will be null.
 
 * only non-static data members are saved by serialization process
 
 * static data members and trasient data members are not saved by serialization.
 
 * static members belong to the class and not to any individual instance.The concept of
   serialization is concerned with  If we try to do
   it will compile but will raise an exception at run-time
   
 * If we don't want to save the state of a variable, we mark that variable as transient. 
   The environment will know that this variable need to be ignored.
   
 * constructor of an object is never called when an object is deserialized 