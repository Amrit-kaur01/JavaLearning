* used to order the objects of user-defined classes

*it is a functional interface that contains only one abstract method
 1. compare(Object o1,Object o2)

* The Comparable interface is a good choice to use for defining the default ordering, or in other words, if it's the main way of comparing objects.

* Reasons for using Comparator instead of Comparable in some cases:
- Sometimes we can't modify the source code of the class whose objects we want to sort, thus making the use of Comparable impossible
- Using Comparators allows us to avoid adding additional code to our domain classes
- We can define multiple different comparison strategies, which isn't possible when using Comparable